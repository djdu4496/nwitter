{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","src","width","height","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","document","data","marginTop","Profile","refreshUser","console","log","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.256ce316.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app' // 'firebase/compat/app'에 포함된 모든 모듈을 firebase라는 객체에 부여한다\nimport \"firebase/compat/auth\"\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY, // process.env === .env 파일을 읽어 파일 안에 있는 변수값을 불러오라\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\n\n// export default firebase.initializeApp(firebaseConfig); \n// firebase.initializeApp === initializeApp 함수를 firebase 객체에서 꺼내 사용한다\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\nimport { useState } from 'react'\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const { target: {name, value} } = event;\n        if(name === \"email\"){\n            setEmail(value)\n        }\n        else if(name === \"password\"){\n            setPassword(value)\n        }\n    }\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            let data;\n            if(newAccount){\n                // create newAccount\n                data = await authService.createUserWithEmailAndPassword(email, password)\n            }\n            else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n        }\n        catch (error){\n            setError(error.message)\n        }\n    }\n\n    const toggleAccount = () => setNewAccount((prev) => !prev)\n\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input \n                name=\"email\"\n                type=\"email\" \n                placeholder=\"Email\" \n                required \n                value={email}\n                onChange={onChange}\n                className=\"authInput\"\n                />\n                <input \n                name=\"password\"\n                type=\"password\" \n                placeholder=\"Password\" \n                required \n                value={password}\n                onChange={onChange}\n                className=\"authInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value={newAccount ? \"Create Account\" : \"Log In\"}\n                    className=\"authInput authSubmit\"\n                 />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    )\n    \n};\n\n\nexport default AuthForm;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\"\n\nconst Auth = () => {\n\n    const onSocialClick = async (event) => {\n        const { target: { name } } = event;\n        let provider;\n        if(name === \"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        }\n        else if(name === \"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n    }\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm className=\"authBtns\" />\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;","import { dbService, storageService } from \"fbase\";\nimport { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm('삭제하시겠습니까?');\n        \n        if(ok){\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\n            if(nweetObj.attachmentUrl !== \"\"){\n                await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n            }\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev)\n\n    const onChange = (event) => {\n        const { target : { value }} = event;\n        setNewNweet(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        // console.log(nweetObj.id, newNweet);\n        await dbService.doc(`nweets/${nweetObj.id}`).update({text: newNweet})\n        setEditing(false);\n    }\n    \n    return (\n        <div className=\"nweet\">\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                        <input \n                            onChange={onChange} \n                            value={newNweet} \n                            required \n                            placeholder=\"Edit your nweet\"\n                            autoFocus\n                            className=\"formInput\"\n                        />\n                        <input type=\"submit\" value=\"Updata Nweet\" className=\"formBtn\" />\n                    </form>\n                    <button onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                        Cancel\n                    </button>\n                </>\n            ) : (            \n                <>\n                    <h4>{nweetObj.text}</h4>\n                    {nweetObj.attachmentUrl && (\n                        <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n                    )}\n                    {isOwner && ( // isOwner가 true일때만 버튼이 나타남\n                        <div className=\"nweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\"\n\nconst NweetFactory = ({ userObj }) => {\n    const [nweet, setNweet] = useState('');\n    const [attachment, setAttachment] = useState('');\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(nweet === \"\"){\n            return;\n        }\n        let attachmentUrl = \"\";\n        if(attachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`)\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        await dbService.collection(\"nweets\").add({\n            text: nweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        });\n        setNweet(\"\");\n        setAttachment();\n    };\n\n    const onChange = (event) => {\n        event.preventDefault();\n        const { target: { value }, } = event; // let value = event.target.value;\n        setNweet(value)\n    };\n\n    const onFileChange = (event) => {\n        const { target : { files }, } = event;\n        const theFile = files[0]\n        const reader = new FileReader(); // 브라우저 API\n        reader.onloadend = (finishedEvent) => {\n            const { currentTarget : { result },} = finishedEvent;\n            setAttachment(result)\n        }\n        if(Boolean(theFile)){\n            reader.readAsDataURL(theFile);\n        }\n    }\n    \n    const onClearAttachment = () => setAttachment('');\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input \n                    className=\"factoryInput__input\"\n                    value={nweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input \n                id=\"attach-file\"\n                type=\"file\" \n                accept=\"image/*\" \n                onChange={onFileChange} \n                style={{\n                    opacity: 0,\n                }}\n            />\n        {attachment && (\n            <div className=\"factoryForm__attachment\">\n                <img \n                    src={attachment} \n                    style={{\n                        backgroundImage: attachment,\n                    }} \n                />\n                <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                </div>\n            </div>\n        )}\n    </form>\n    )\n};\n\nexport default NweetFactory;","import { dbService } from \"fbase\";\nimport { useEffect, useState } from \"react\";\nimport Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\n\n\nconst Home = ({ userObj }) => {\n    // console.log(userObj)\n    const [nweets, setNweets] = useState([]);\n\n\n    useEffect(() => {\n        dbService\n            .collection(\"nweets\")\n            .orderBy(\"createdAt\", \"desc\")\n            .onSnapshot((snapshot) => {\n            const newArray = snapshot.docs.map((document) => ({\n                id: document.id,\n                ...document.data(),\n            }));\n            setNweets(newArray);\n        })\n    }, []);\n\n    \n\n\n\n    return (\n        <div className=\"container\">\n            < NweetFactory userObj={userObj} />\n            <div style={{ marginTop: 30 }}>\n                {nweets.map((nweet) => (\n                    <Nweet \n                    key={nweet.id} \n                    nweetObj={nweet}\n                    isOwner={nweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"fbase\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\nconst Profile = ({ userObj, refreshUser }) => {\n    console.log(userObj)\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    }\n\n    const onChange= (event) => {\n        const { target : { value } } = event;\n        setNewDisplayName(value);\n    }\n    \n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser();\n        }\n        \n    }\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input \n                    onChange={onChange}\n                    type=\"text\" \n                    placeholder=\"Display name\"\n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value=\"Update Profile\" \n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    )\n};\n\nexport default Profile;","import { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ( { userObj } ) => {\n    return (\n        <nav>\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n                <li>\n                    <Link to='/' style={{ marginRight: 10 }}>\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                    </Link>\n                </li>\n                <li>\n                    <Link \n                        to='/profile'\n                        style={{\n                            marginLeft: 10,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            fontSize: 12,\n                        }}\n                    >\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                        <span style={{ marginTop: 10 }}>\n                            {userObj.displayName \n                                ? `${userObj.displayName}의 Profile`\n                                : \"Profile\"\n                            }\n                        </span>\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;","import {HashRouter as Router, Route, Switch} from 'react-router-dom';\n// import { Redirecet } from 'react-router-dom';\nimport Auth from 'routes/Auth'\nimport Home from 'routes/Home'\nimport Profile from 'routes/Profile';\nimport Navigation from './Navigation';\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {\n                    isLoggedIn ? (\n                        <div\n                            style={{ // 인라인 방식 스타일\n                                maxWidth: 890,\n                                width: \"100%\",\n                                margin: \"0 auto\",\n                                marginTop: 80,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        > \n                        <Route exact path='/'>\n                            <Home userObj={userObj} />\n                        </Route>  \n                        <Route exact path='/profile'>\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\n                        </Route>\n                        </div>\n                    ) : (\n                        <Route exact path='/'>\n                            <Auth />\n                        </Route>\n                    )\n                }\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter;\n","import { useState, useEffect } from 'react'\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }\n      else{\n        setUserObj(false)\n      }\n      setInit(true);\n    })\n  }, [])\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n\n  return (\n    <>\n    { init ? (\n       <AppRouter isLoggedIn={Boolean(userObj)} userObj={userObj} refreshUser={refreshUser} /> \n       ): (\n         \"initializing...\" \n         )}\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App'; // 파일 위치를 업데이트했다.\nimport \"./styles.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}